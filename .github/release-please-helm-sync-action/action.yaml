name: 'Sync Helm Chart appVersion'
description: 'Syncs Helm chart appVersion with the app version from release-please manifest'
inputs:
  chart-path:
    description: 'Path to the Helm chart directory'
    required: true
  app-path:
    description: 'Path to the app in release-please manifest'
    required: true
  release-please-outputs:
    description: 'JSON string of release-please step outputs'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: false
    default: ${{ github.token }}
  create-github-release:
    description: 'Whether to create a GitHub release for helm package'
    required: false
    default: 'true'
runs:
  using: 'composite'
  steps:
    - name: Tag Helm Release and Create GitHub Release
      if: ${{ (fromJSON(inputs.release-please-outputs).releases_created || fromJSON(inputs.release-please-outputs).release_created) == 'true' }}
      shell: bash
      env:
        CREATE_GITHUB_RELEASE: ${{ inputs.create-github-release }}
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # Parse release-please config to get helm package name
        HELM_PACKAGE_NAME=$(jq -r '.packages["${{ inputs.chart-path }}"]["package-name"] // "${{ inputs.chart-path }}"' release-please-config.json)

        # Get helm chart version
        HELM_VERSION=$(jq -r '."${{ inputs.chart-path }}"' .release-please-manifest.json)
        HELM_TAG="${HELM_PACKAGE_NAME}-v${HELM_VERSION}"

        # Create and push git tag for helm package if it doesn't exist
        if ! git tag -l | grep -q "^${HELM_TAG}$"; then
          echo "Creating helm tag: $HELM_TAG"
          git tag "$HELM_TAG"
          git push origin "$HELM_TAG"
        else
          echo "Helm tag $HELM_TAG already exists"
        fi

        # Create GitHub release if enabled
        if [[ "$CREATE_GITHUB_RELEASE" == "true" ]]; then
          # Check if release already exists
          if ! gh release view "$HELM_TAG" >/dev/null 2>&1; then
            echo "Creating GitHub release for $HELM_TAG"
            gh release create "$HELM_TAG" \
              --title "$HELM_TAG" \
              --notes "Helm chart release $HELM_VERSION" \
              --target "$(git rev-parse HEAD)"
          else
            echo "GitHub release $HELM_TAG already exists"
          fi
        fi
    - name: Checkout PR branch
      if: ${{ (fromJSON(inputs.release-please-outputs).prs_created || fromJSON(inputs.release-please-outputs).pr_created) == 'true' }}
      uses: actions/checkout@v4
      with:
        ref: ${{ fromJSON(fromJSON(inputs.release-please-outputs).pr || '{}').headBranchName }}
        path: pr-workspace
    - name: Sync Helm Version
      if: ${{ (fromJSON(inputs.release-please-outputs).prs_created || fromJSON(inputs.release-please-outputs).pr_created) == 'true' }}
      shell: bash
      working-directory: pr-workspace
      env:
        CHART_PATH: ${{ inputs.chart-path }}
        APP_PATH: ${{ inputs.app-path }}
        HEAD_BRANCH: ${{ fromJSON(fromJSON(inputs.release-please-outputs).pr || '{}').headBranchName }}
        BASE_BRANCH: ${{ fromJSON(fromJSON(inputs.release-please-outputs).pr || '{}').baseBranchName }}
        GH_TOKEN: ${{ inputs.github-token }}
      run: ${{ github.action_path }}/sync-helm-version.sh
